//Leetcode 8. String to Integer (atoi) med
//题意：实现一个 myAtoi(string s) 函数，它将一个字符串转换为 32 位带符号整数。
//算法步骤如下：
//忽略空白字符：忽略字符串开头的所有空格字符。
//符号判断：判断符号。若遇到字符 '-' 表示负数，若遇到字符 '+' 表示正数。如果没有符号字符，则默认是正数。
//转换数字：跳过所有开头的零，直到遇到非数字字符或字符串结束为止。如果没有遇到数字字符，返回 0。
//溢出处理：如果结果超过 32 位有符号整数范围[-2 ^ 31, 2 ^ 31 - 1]，则将其截断到该范围内。
//特别地，如果结果小于 -2^31，则返回 -2^31；如果大于 2^31 - 1，则返回 2^31 - 1。
//返回结果：返回转换后的整数。
//思路：忽略空白字符：这一步是为了保证处理任何可能的输入前空格情况。
//符号判断：对于符号，正负符号决定了最终结果的符号，默认情况下我们假设是正数。
//数字转换：我们逐个读取字符，判断其是否为数字，如果是数字就将其加入结果中。如果遇到非数字字符（包括符号或空格等），就停止读取。
//溢出处理：由于转换后可能会超出 32 位带符号整数的范围，所以需要额外检查并处理溢出的情况。
//时间复杂度:  O(n)
//空间复杂度： O(26) = O(1)
        public int MyAtoi(string s)
        {
            int index = 0;
            int n = s.Length;
            int sign = 1;
            long result = 0;

            // 忽略开头的空格
            while (index < n && s[index] == ' ')
            {
                index++;
            }

            // 判断符号
            if (index < n && (s[index] == '+' || s[index] == '-'))
            {
                sign = (s[index] == '-') ? -1 : 1;
                index++;
            }

            // 转换数字
            while (index < n && Char.IsDigit(s[index]))
            {
                result = result * 10 + (s[index] - '0');
                index++;

                // 检查是否溢出
                if (result > Int32.MaxValue)
                {
                    return sign == 1 ? Int32.MaxValue : Int32.MinValue;
                }
            }

            // 返回转换后的整数
            return (int)(sign * result);
        }