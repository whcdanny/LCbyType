//Leetcode 371. Sum of Two Integers med
//题意：给定两个整数 a 和 b，在不使用加号（+）和减号（-）运算符的情况下，返回它们的和。
//思路：本题要求使用位运算来完成两个整数的加法。这可以通过模拟加法的二进制运算来实现。具体思路如下：
//理解二进制加法
//对于二进制加法，每一位相加可能有以下三种情况：
//0 + 0 = 0
//1 + 0 = 1
//1 + 1 = 10（需要进位）
//位运算中的两个核心操作：
//异或操作(^)：模拟不考虑进位的加法。
//与操作(&) 并左移一位：计算进位值。
//模拟加法过程
//每次使用异或(^) 获取不含进位的部分。
//使用与(&) 并左移一位获取进位。
//将不含进位部分和进位值不断相加，直到进位为 0。
//计算进位：carry = (a & b) << 1
//通过按位与(&) 找到需要进位的部分。
//左移一位表示进位的位置。
//计算当前的部分和：a = a ^ b
//使用异或(^) 得到不考虑进位的部分。
//更新进位：b = carry
//将进位赋值给 b，继续下一轮加法。
//时间复杂度:  O(n)
//空间复杂度： O(26) = O(1)
        public int GetSum(int a, int b)
        {
            while (b != 0)
            {
                int carry = (a & b) << 1; // 计算进位
                a = a ^ b;                // 计算不含进位的部分
                b = carry;                // 将进位赋值给 b，继续加法
            }
            return a;
        }