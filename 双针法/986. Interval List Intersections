//Leetcode 986. Interval List Intersections med
//题意：给定两个有序的闭区间列表 firstList 和 secondList，其中 firstList[i] = [starti, endi] 和 secondList[j] = [startj, endj]。每个区间列表都是按照起始位置排序的。
//返回这两个区间列表的交集。
//闭区间[a, b]（其中 a <= b）表示实数 x 的集合，满足 a <= x <= b。
//两个闭区间的交集是一个实数集，要么为空，要么表示为一个闭区间。例如，闭区间[1, 3] 和[2, 4] 的交集为[2, 3]。 
//思路：双指针，两个指针 i 和 j，分别指向两个区间列表的起始位置。
//使用一个循环，比较当前两个区间的起始和结束位置，找到它们的交集。
//如果 firstList[i] 的结束位置小于 secondList[j] 的起始位置，说明两个区间无交集，将 i 向后移动。
//如果 secondList[j] 的结束位置小于 firstList[i] 的起始位置，说明两个区间无交集，将 j 向后移动。
//否则，两个区间有交集，交集的起始位置是较大的起始位置，结束位置是较小的结束位置。将交集加入结果集。
//时间复杂度：O(n + m)，其中 n 和 m 分别是两个区间列表的长度
//空间复杂度：O(1)
        public int[][] IntervalIntersection(int[][] firstList, int[][] secondList)
        {
            List<int[]> result = new List<int[]>();

            int i = 0, j = 0;

            while (i < firstList.Length && j < secondList.Length)
            {
                int start = Math.Max(firstList[i][0], secondList[j][0]);
                int end = Math.Min(firstList[i][1], secondList[j][1]);

                if (start <= end)
                {
                    result.Add(new int[] { start, end });
                }

                if (firstList[i][1] < secondList[j][1])
                {
                    i++;
                }
                else
                {
                    j++;
                }
            }

            return result.ToArray();
        }